'use strict';

var dropDown = document.querySelectorAll('.js__dropdown');

var dropDownTitle = document.querySelectorAll('.js__dropdown-title');

var arrow = document.querySelectorAll('.arrow');

function refreshDropDown(event) {
  var parent = event.currentTarget.parentElement;
  // var arrowSpan = event.currentTarget.children[1];
  // var arrowAsChild = arrowSpan.children;
  var arrowAsChild = event.currentTarget.children[1];

  if (parent.classList.contains('visible')) {
    parent.classList.remove('visible');

    arrowAsChild.classList.remove('fa-angle-up');
    arrowAsChild.classList.add('fa-angle-down');

  } else {
    closeAllDropDown();
    parent.classList.add('visible');

    arrowAsChild.classList.remove('fa-angle-down');
    arrowAsChild.classList.add('fa-angle-up');

  }
}

function closeAllDropDown() {
  for (var i = 0; i < dropDown.length; i++) {
    dropDown[i].classList.remove('visible');
    arrow[i].classList.remove('fa-angle-up');
    arrow[i].classList.add('fa-angle-down');
  }
}

for (var j = 0; j < dropDownTitle.length; j++) {
  dropDownTitle[j].addEventListener('click', refreshDropDown);
}

//get image

var fr = new FileReader();

var uploadBtn = document.querySelector('.item__button-file');
var fileField = document.querySelector('#image');
var profileImage = document.querySelector('.personal-image');
var miniImage = document.querySelector('.item-preview__img');

function getImage(e){
  var myFile = e.currentTarget.files[0];
  fr.addEventListener('load', writeImage);
  fr.readAsDataURL(myFile);
}

function writeImage() {
  profileImage.src = fr.result;
  miniImage.src = fr.result;
}

function fakeFileClick() {
  fileField.click();
}

fileField.addEventListener('change', getImage);
uploadBtn.addEventListener('click', fakeFileClick);

//input name y role

var nameField = document.querySelector('.form-field--name');
var roleField = document.querySelector('.form-field--role');

function writeData(event) {
  var guiltyElement = event.currentTarget;
  var targetID = guiltyElement.getAttribute('data-donde');

  document.querySelector('#' + targetID).innerHTML = guiltyElement.value;
}

nameField.addEventListener('keyup', writeData);
roleField.addEventListener('keyup', writeData);

//redes sociales

var mailField = document.querySelector('.form-field--mail');
var telField = document.querySelector('.form-field--tel');
var linField = document.querySelector('.form-field--lin');
var ghField = document.querySelector('.form-field--gh');

function writeSocialMedia(event) {
  var guiltyElement = event.currentTarget;
  var targetID = guiltyElement.getAttribute('data-donde');
  var inputID = guiltyElement.getAttribute('id');
  var linkID = document.querySelector('#' + targetID);

  if (inputID==='email'){
    linkID.href = 'mailto:' + guiltyElement.value;
    linkID.title = guiltyElement.value;
    linkID.classList.remove('contact__link--inactive');
    linkID.classList.add('contact__link--active');
  } else if (inputID === 'phone'){
    linkID.href = 'tel:' + guiltyElement.value;
    linkID.title = guiltyElement.value;
    linkID.classList.remove('contact__link--inactive');
    linkID.classList.add('contact__link--active');
  } else if  (inputID === 'linkedin'){
    linkID.href = 'https://linkedin.com/in/' + guiltyElement.value;
    linkID.title = 'https://linkedin.com/in/' + guiltyElement.value;
    linkID.classList.remove('contact__link--inactive');
    linkID.classList.add('contact__link--active');
  } else if (inputID === 'github') {
    linkID.href = 'https://github.com/' + guiltyElement.value;
    linkID.title = 'https://github.com/' + guiltyElement.value;
    linkID.classList.remove('contact__link--inactive');
    linkID.classList.add('contact__link--active');
  }
}

mailField.addEventListener('change', writeSocialMedia);
telField.addEventListener('change', writeSocialMedia);
linField.addEventListener('change', writeSocialMedia);
ghField.addEventListener('change', writeSocialMedia);

// reset

var resetButton = document.querySelector('.button-reset');

function resetForm() {
  document.getElementById('form').reset();
  // paleta reset
  card.classList.remove('paleta-azul', 'paleta-roja', 'paleta-gris');
  card.classList.add('paleta-azul');
  // font reset
  cardInfo.classList.remove('font-card--comicsans', 'font-card--ubuntu', 'font-card--montserrat');
  cardInfo.classList.add('font-card--comicsans');
  // reset links
  var linkID = document.querySelectorAll('.contact-link');
  for (var i = 0; i < linkID.length; i++) {
    if (linkID[i].classList.contains('contact__link--active') === true) {
      linkID[i].classList.remove('contact__link--active');
      linkID[i].classList.add('contact__link--inactive');
      linkID[i].href = "";
      linkID[i].title = "";
    }
  }
  // reset nombre y role
  var nameFieldFilled = document.querySelector('#element-name');
  nameFieldFilled.innerHTML = 'nombre apellidos';
  var roleFieldFilled = document.querySelector('#element-role');
  roleFieldFilled.innerHTML = 'Front-end developer';

  //reset pic
  profileImage.src = "./images/card-image.png";
  miniImage.src = "http://placehold.it/29x29/ffffff/ffffff";

  // reset skills
  var skillBox = document.querySelector('.skills__list');
  skillBox.innerHTML = '';

  //reset selects
  var selectContainer = document.querySelector('.js__select-container');
  selectContainer.innerHTML = '<label class="item__label" for="abilities">Habilidades (máximo 3)</label>';
  addSelect();

  //Reset localStorage
  localStorage.clear();
}

resetButton.addEventListener('click', resetForm);

//userSelections para recoger en un array las selecciones del usuario
var userSelections = [];

//arrayOptions para crear las option del select
var arrayOptions = {};

fetch('https://raw.githubusercontent.com/Adalab/dorcas-s2-proyecto-data/master/skills.json')
  .then(function (response) {
    return response.json();
  })
  .then(function (json) {
    arrayOptions = json.skills;
    //Llamada a la función que crea el contenido la primera vez
    addContentToHtml(0);
  });

//función para crear y añadir contenido al html
function addContentToHtml(index) {
  console.log('newIndex = ', index);

  //Apuntar al padre de Select, el div
  var parentDivSelect = document.querySelector('.js__select-container');

  //Declaraciones de variables de select y su contenido
  var newParentSelect = document.createElement('div');
  var newSelect = document.createElement('select');

  //Declaraciones variables boton más div que lo contiene
  var newSelectButton = document.createElement('div');
  var newSelectButtonContent = document.createElement('i');

  //Insercion contenido en option, e insercion de option como contenido de select. Insercion de select dentro del div que es su padre
  newParentSelect.appendChild(newSelect);
  parentDivSelect.appendChild(newParentSelect);
  newParentSelect.className = 'item__select-container position-' + index;
  newSelect.className = 'item__select position-' + index;
  // newSelect.classList.add('item__select');
  newSelect.setAttribute('name', 'skills');

  //Insercion clase font-awesome en <i>, insercion <i> en <div>
  newSelectButtonContent.classList.add('fas', 'fa-plus', 'js__add');
  newSelectButtonContent.setAttribute('data-value', index);
  newSelectButton.appendChild(newSelectButtonContent);
  newSelectButton.classList.add('item__select-button');
  newParentSelect.appendChild(newSelectButton);

  //Añadir options
  for (var j = 0; j < arrayOptions.length; j++) {
    var newOption = document.createElement('option');
    newOption.setAttribute('number', j);
    newOption.setAttribute('value', arrayOptions[j]);
    var optionContent = document.createTextNode(arrayOptions[j]);
    newOption.appendChild(optionContent);
    newSelect.appendChild(newOption);
    newOption.classList.add('js__option');
  }

  changeButton();
}


//función para cambiar el signo del botón dependiendo de las seleciones del usuario
function changeButton() {
  var button = document.querySelectorAll('.js__add');
  for (var i = 0; i < button.length; i++) {
    if (userSelections.length === i) {
      button[i].classList.add('fa-plus');
      button[i].removeEventListener('click', removeSelect);
      button[i].addEventListener('click', addSelect);
    } else {
      button[i].classList.remove('fa-plus');
      button[i].classList.add('fa-minus');
      button[i].removeEventListener('click', addSelect);
      button[i].addEventListener('click', removeSelect);
    }
  }

}

//Función para añadir el contenido (hasta que las selecciones del usuario sean 3) y cambiar el signo del último botón
function addSelect() {
  console.log('estoy poniendo');
  userSelections = document.querySelectorAll('.item__select-container');

  var newIndex = 0;
  for (var i = 0; i < 3; i++) {
    var createdElements = document.querySelectorAll('.position-' + i);
    //console.log('createdElements.position' + i + "=" + createdElements.length);
    if (createdElements.length === 0) {
      newIndex = i;
    }
  }

  if (userSelections.length < 3) {
    addContentToHtml(newIndex);
  } else if (userSelections.length === 3) {
    changeButton();
  }
  addContentToCard();
}


//Función para quitar el contenido (de momento sólo quita el primer campo no el correspondiente al botón que se pincha)
function removeSelect(event) {
  console.log('estoy quitando');

  var clickedElement = event.currentTarget;
  var elementNumber = clickedElement.getAttribute('data-value');
  var plusButton = document.querySelectorAll('.fa-plus');
  var createdElements = document.querySelectorAll('.position-' + elementNumber);

  for (var i = 0; i < createdElements.length; i++) {
    createdElements[i].remove();
  }

  userSelections = document.querySelectorAll('.item__select-container');

  if (plusButton.length === 0) {
    addContentToHtml(elementNumber);
  }
  //addContentToCard();
}

//Variables para crear la lista de habilidades en la preview de la tarjeta y darle clases
var skills = document.querySelector('.skills');
var skillsList = document.createElement('ul');

skills.appendChild(skillsList);
skillsList.classList.add('skills__list', 'text__skills');

//Función para crear el contenido de las habilidades en la preview de la trajeta.
function addContentToCard() {
  var selects = document.getElementsByTagName('select');
  var newSkillsItem = document.querySelectorAll('.skills__item');

  for (var s = 0; s < newSkillsItem.length; s++) {
    skillsList.removeChild(newSkillsItem[s]);
  }

  for (var i = 0; i < userSelections.length; i++) {
    var userSelectionPosition = userSelections[i].classList[1];
    var optionContent = selects[i].value;
    var skillsItem = document.createElement('li');
    var skillsContent = document.createTextNode(optionContent);
    skillsItem.appendChild(skillsContent);
    skillsItem.classList.add(userSelectionPosition);
    skillsList.appendChild(skillsItem);
    skillsItem.classList.add('skills__item');
  }
}

// paleta

var paleta1 = document.querySelector('#color1');
var paleta2 = document.querySelector('#color2');
var paleta3 = document.querySelector('#color3');
var card = document.querySelector('#card');
var cardInfo = document.querySelector('#card__info');

function changeColor(event) {
  var clickedPalette = event.currentTarget;
  var selectedPalette = clickedPalette.getAttribute('radio-cual');
  card.classList.remove('paleta-azul', 'paleta-roja', 'paleta-gris');
  if (selectedPalette === '1') {
    card.classList.add('paleta-azul');
  } else if (selectedPalette === '2') {
    card.classList.add('paleta-roja');
  } else if (selectedPalette === '3') {
    card.classList.add('paleta-gris');
  }
}

paleta1.addEventListener('click', changeColor);
paleta2.addEventListener('click', changeColor);
paleta3.addEventListener('click', changeColor);

// fuentes

var font1 = document.querySelector('#font1');
var font2 = document.querySelector('#font2');
var font3 = document.querySelector('#font3');

function changeFont (event) {
  var clickedFont = event.currentTarget;
  var selectedFont = clickedFont.getAttribute('radio-cual');
  cardInfo.classList.remove('font-card--comicsans', 'font-card--ubuntu', 'font-card--montserrat');

  if (selectedFont === '4') {
    cardInfo.classList.add('font-card--ubuntu');
  } else if (selectedFont === '5') {
    cardInfo.classList.add('font-card--comicsans');
  } else if (selectedFont === '6') {
    cardInfo.classList.add('font-card--montserrat');
  }
}

font1.addEventListener('click', changeFont);
font2.addEventListener('click', changeFont);
font3.addEventListener('click', changeFont);

'use strict';
const listOfChosenSelects = document.getElementsByTagName('select');
const submitButton = document.querySelector('#submit');
const responseURL = document.querySelector('.response');
const buttonTwitter = document.querySelector('.btn-twitter');
const linkTwitter = document.querySelector('.link-twitter');
const form = document.querySelector('#form');
const cardCreated = document.querySelector('.card-created');
let twitterURL;



const sendData = () => {
  const inputs = Array.from(form.elements);
  const json = getJSONFromInputs(inputs);
  json.skills = [];
  console.log(`json ${json}`);
  for (const oneSelect of listOfChosenSelects){
    json.skills.push(listOfChosenSelects[i].value);
  }
  json.photo = fr.result;
  console.log(`json justo antes enviar datos ${json}`);
  const jsonFromLocalStorage = JSON.parse(localStorage.getItem('jsonToSend'));
  console.log(`jasonFromLocal ${jsonFromLocalStorage}`);
  if(JSON.stringify(json) === JSON.stringify(jsonFromLocalStorage)){
    const urlFromStorage = JSON.parse(localStorage.getItem('cardURL'));
    responseURL.innerHTML = `<a href=${urlFromStorage}>${urlFromStorage}</a>`;
    twitterURL = urlFromStorage;
    cardCreated.classList.remove('hidden__item');
  } else {
    sendRequest(json);
  }
};

const loadPhoto = () => {
  const myFile = document.querySelector('#image').files[0];
  fr.addEventListener('load', sendData);
  fr.readAsDataURL(myFile);
};

const getJSONFromInputs = inputs =>{
  return inputs.reduce(function (acc, val) {

    if (val.type==='radio' && val.checked===true) {
      acc[val.name] = val.value;
    }
    if ((val.nodeName !== 'BUTTON') && (val.nodeName !== 'FIELDSET') && (val.type!=='radio') ){
      acc[val.name] = val.value;
    }
    return acc;
  }, {});
};

const sendRequest = json => {
  localStorage.setItem('jsonToSend',JSON.stringify(json));
  fetch('https://us-central1-awesome-cards-cf6f0.cloudfunctions.net/card/', {
    method: 'POST',
    body: JSON.stringify(json),
    headers: {
      'content-type': 'application/json'
    },
  })

    .then(resp=> {
      return resp.json(); })
    .then(result=> {
      console.log(`result ${result}`);
      showURL(result); })
    .catch(error=>{
      console.log(error);
    });
};

const  showURL = result => {
  if(result.success){
    localStorage.setItem('cardURL',JSON.stringify(result.cardURL));
    responseURL.innerHTML = `<a href=${result.cardURL}>${result.cardURL}</a>`;
  }else{
    responseURL.innerHTML = 'ERROR:' + result.error;
  }
  cardCreated.classList.remove('hidden__item');
  twitterURL = result.cardURL;

  if (submitButton.classList.contains('btn-card')) {
    submitButton.classList.remove('btn-card');
    submitButton.classList.add('btn-card--inactive');
  }
};

submitButton.addEventListener('click', loadPhoto);

////Boton twitter
const shareOnTwitter = () => {
  linkTwitter.href =`https://twitter.com/intent/tweet?url=${twitterURL}&text=Acabo%20de%20crear%20mi%20tarjeta%20con%20Font%20Awesome%20de%20Peak-y-blinded&hashtags=WomenInTech`;
};


buttonTwitter.addEventListener('click', shareOnTwitter);

'use strict';

var data = {};
var dataStorageRetrieved = [];

var fr = new FileReader();

var inputStorage = document.querySelectorAll('.input__storage');

//Función para recuperar datos almacenados en localStorage
function useDataStorage(inputStorageName, inputStorageValue, inputStoragePosition) {
  console.log('recuperando localStorage');
  dataStorageRetrieved = JSON.parse(localStorage.getItem('jsonToSend'));
  restoreDataForPreview(dataStorageRetrieved);

  //Miro que el localStorage no esté vacio
  if(dataStorageRetrieved !== null){
  //Creo una acción por si hay campos vacios
    if(dataStorageRetrieved[inputStorageName] === undefined){
      inputStorageName = '';
    }else {
      //Introduzco los datos recuperador en el objeto 'data'
      inputStorageValue = dataStorageRetrieved[inputStorageName];
      data[inputStorageName] = inputStorageValue;

      if(inputStoragePosition.type === 'radio' && inputStoragePosition.value === data[inputStorageName] ){
        //Condicion si los inputs son tipo radio
        inputStoragePosition.checked = true;
      } else if(inputStoragePosition.type === 'file'){
        //Para la foto
        var miniImage = document.querySelector('.item-preview__img');
        miniImage.src = dataStorageRetrieved.photo;
      } else{
        inputStoragePosition.value = data[inputStorageName];
      }
    }
  }
}

function saveDataStorage(event) {
  //Variable para actual nombre del input y valor del input
  var currentInput = event.currentTarget;
  var currentInputName = currentInput.name;
  var currentInputValue = currentInput.value;

  if(currentInput.type === 'file'){
    var miniImage = document.querySelector('.item-preview__img');
    data[currentInputName] = miniImage.src;

  } else if (currentInput.type === 'radio' && currentInput.checked === true){
    data[currentInputName] = currentInputValue;
    // localStorage.setItem(currentInputName,currentInputValue);
  } else {
    //Guardo los datos dentro del objeto 'data'
    data[currentInputName] = currentInputValue;
    // localStorage.setItem(currentInputName,currentInputValue);
  }

  //Guardo datos individualmente y tambien como objeto 'data' que convierto en cadena
  // localStorage.setItem(currentInputName,currentInputValue);
  localStorage.setItem('formData',JSON.stringify(data));
}


for (var i = 0; i < inputStorage.length; i++ ){
  var inputStoragePosition = inputStorage[i];
  var inputStorageName = inputStorage[i].name;
  var inputStorageValue = inputStorage[i].value;
  useDataStorage(inputStorageName, inputStorageValue, inputStoragePosition);

  //
  // inputStorage[i].addEventListener('change',saveDataStorage);
}
for (var j = 0; j < inputStorage.length; j++ ){
  inputStorage[j].addEventListener('change',saveDataStorage);
}

//Recupero los datos de localStorage y los guardo en una variable

function restoreDataForPreview(dataStorageRetrieved) {

  document.querySelector('#element-name').innerText = dataStorageRetrieved.name;
  document.querySelector('#element-role').innerText = dataStorageRetrieved.job;
  document.querySelector('#element-mail').href = 'mailto:' + dataStorageRetrieved.email;
  document.querySelector('#element-tel').href = 'tel:' + dataStorageRetrieved.phone;
  document.querySelector('#element-lin').href = 'https://linkedin.com/in/' + dataStorageRetrieved.linkedin;
  document.querySelector('#element-gh').href = 'https://github.com/' + dataStorageRetrieved.github;
  document.querySelector('.personal-image').src = dataStorageRetrieved.photo;

  var cardPreview = document.querySelector('#card');
console.log(dataStorageRetrieved.palette);
  if (dataStorageRetrieved.palette === '1') {
    cardPreview.classList.remove('paleta-azul', 'paleta-roja', 'paleta-gris');
    cardPreview.classList.add('paleta-azul');
  } else if (dataStorageRetrieved.palette === '2') {
    cardPreview.classList.remove('paleta-azul', 'paleta-roja', 'paleta-gris');
    cardPreview.classList.add('paleta-roja');
  } else if (dataStorageRetrieved.palette === '3') {
    cardPreview.classList.remove('paleta-azul', 'paleta-roja', 'paleta-gris');
    cardPreview.classList.add('paleta-gris');
  }

  if (dataStorageRetrieved.typography === '1') {
    cardPreview.classList.remove('font-card--comicsans', 'font-card--ubuntu', 'font-card--montserrat');
    cardPreview.classList.add('font-card--ubuntu');
  } else if (dataStorageRetrieved.typography === '2') {
    cardPreview.classList.remove('font-card--comicsans', 'font-card--ubuntu', 'font-card--montserrat');
    cardPreview.classList.add('font-card--comicsans');
  } else if (dataStorageRetrieved.typography === '3') {
    cardPreview.classList.remove('font-card--comicsans', 'font-card--ubuntu', 'font-card--montserrat');
    cardPreview.classList.add('font-card--montserrat');
  }
}

//# sourceMappingURL=main.min.js.map
