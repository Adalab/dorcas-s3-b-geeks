'use strict';

'use strict';

const dropDown = document.querySelectorAll('.js__dropdown');

const dropDownTitle = document.querySelectorAll('.js__dropdown-title');

const refreshDropDown = event => {
  const parent = event.currentTarget.parentElement;
  // var arrowSpan = event.currentTarget.children[1];
  // var arrowAsChild = arrowSpan.children;
  const arrowAsChild = event.currentTarget.children[1];

  if (parent.classList.contains('visible')) {
    parent.classList.remove('visible');

    arrowAsChild.classList.remove('fa-angle-up');
    arrowAsChild.classList.add('fa-angle-down');

  } else {
    closeAllDropDown();
    parent.classList.add('visible');

    arrowAsChild.classList.remove('fa-angle-down');
    arrowAsChild.classList.add('fa-angle-up');

  }
}

const closeAllDropDown = () => {
  for(const dropD of dropDown){
    dropD.classList.remove('visible');
    const dropArrow = document.querySelector('.arrow');
    dropArrow.classList.remove('fa-angle-up');
    dropArrow.classList.add('fa-angle-down');
  }
};

for(const title of dropDownTitle) {
  title.addEventListener('click', refreshDropDown);
};

'use strict';
//get image
//FileReader es un constructor, como un lector de archivos
const fr = new FileReader();

const uploadBtn = document.querySelector('.item__button-file');
const fileField = document.querySelector('#image');
const profileImage = document.querySelector('.personal-image');
const miniImage = document.querySelector('.item-preview__img');

const getImage = e => {
  const myFile = e.currentTarget.files[0];
  fr.addEventListener('load', writeImage);
  fr.readAsDataURL(myFile);
  console.log(`fr ${fr}`);
};

const writeImage = () => {
  profileImage.src = fr.result;
  miniImage.src = fr.result;
};

const fakeFileClick = () => {
  fileField.click();
};

fileField.addEventListener('change', getImage);
uploadBtn.addEventListener('click', fakeFileClick);

//input name y role

const nameField = document.querySelector('.form-field--name');
const roleField = document.querySelector('.form-field--role');

const writeData = event => {
  const guiltyElement = event.currentTarget;
  const targetID = guiltyElement.getAttribute('data-donde');

  document.querySelector(`#${targetID}`).innerHTML = guiltyElement.value;
};

nameField.addEventListener('keyup', writeData);
roleField.addEventListener('keyup', writeData);

//redes sociales

const mailField = document.querySelector('.form-field--mail');
const telField = document.querySelector('.form-field--tel');
const linField = document.querySelector('.form-field--lin');
const ghField = document.querySelector('.form-field--gh');

const writeSocialMedia = event => {
  const guiltyElement = event.currentTarget;
  const targetID = guiltyElement.getAttribute('data-donde');
  const inputID = guiltyElement.getAttribute('id');
  const linkID = document.querySelector(`#${targetID}`);

  if (inputID==='email'){
    linkID.href = `mailto:${guiltyElement.value}`;
    linkID.title = guiltyElement.value;
    linkID.classList.remove('contact__link--inactive');
    linkID.classList.add('contact__link--active');
  } else if (inputID === 'phone'){
    linkID.href = `tel:${guiltyElement.value}`;
    linkID.title = guiltyElement.value;
    linkID.classList.remove('contact__link--inactive');
    linkID.classList.add('contact__link--active');
  } else if  (inputID === 'linkedin'){
    linkID.href = `https://linkedin.com/in/${guiltyElement.value}`;
    linkID.title = `https://linkedin.com/in/${guiltyElement.value}`;
    linkID.classList.remove('contact__link--inactive');
    linkID.classList.add('contact__link--active');
  } else if (inputID === 'github') {
    linkID.href = `https://github.com/${guiltyElement.value}`;
    linkID.title = `https://github.com/${guiltyElement.value}`;
    linkID.classList.remove('contact__link--inactive');
    linkID.classList.add('contact__link--active');
  }
};

mailField.addEventListener('change', writeSocialMedia);
telField.addEventListener('change', writeSocialMedia);
linField.addEventListener('change', writeSocialMedia);
ghField.addEventListener('change', writeSocialMedia);

// reset

const resetButton = document.querySelector('.button-reset');

const resetForm = () => {
  document.getElementById('form').reset();
  // paleta reset
  card.classList.remove('paleta-azul', 'paleta-roja', 'paleta-gris');
  card.classList.add('paleta-azul');
  // font reset
  cardInfo.classList.remove('font-card--comicsans', 'font-card--ubuntu', 'font-card--montserrat');
  cardInfo.classList.add('font-card--comicsans');
  // reset links
  const linkID = document.querySelectorAll('.contact-link');
  for (const link of linkID) {
    if (link.classList.contains('contact__link--active') === true) {
      link.classList.remove('contact__link--active');
      link.classList.add('contact__link--inactive');
      link.href = '';
      link.title = '';
    }
  }
  // reset nombre y role
  const nameFieldFilled = document.querySelector('#element-name');
  nameFieldFilled.innerHTML = 'nombre apellidos';
  const roleFieldFilled = document.querySelector('#element-role');
  roleFieldFilled.innerHTML = 'Front-end developer';

  //reset pic
  profileImage.src = './images/card-image.png';
  miniImage.src = 'http://placehold.it/29x29/ffffff/ffffff';

  // reset skills
  const skillBox = document.querySelector('.skills__list');
  skillBox.innerHTML = '';

  //reset selects
  const selectContainer = document.querySelector('.js__select-container');
  selectContainer.innerHTML = '<label class="item__label" for="abilities">Habilidades (máximo 3)</label>';
  addSelect();

  //Reset localStorage
  localStorage.clear();
};

resetButton.addEventListener('click', resetForm);

//userSelections para recoger en un array las selecciones del usuario
let userSelections = [];

//arrayOptions para crear las option del select
let arrayOptions = {};

fetch('https://raw.githubusercontent.com/Adalab/dorcas-s2-proyecto-data/master/skills.json')
  .then(response =>{
    return response.json();
  })
  .then(json=> {
    arrayOptions = json.skills;
    //Llamada a la función que crea el contenido la primera vez
    addContentToHtml(0);
  });

//función para crear y añadir contenido al html
const addContentToHtml = index => {
  console.log(`newIndex${index}`);

  //Apuntar al padre de Select, el div
  const parentDivSelect = document.querySelector('.js__select-container');

  //Declaraciones de constiables de select y su contenido
  const newParentSelect = document.createElement('div');
  const newSelect = document.createElement('select');

  //Declaraciones constiables boton más div que lo contiene
  const newSelectButton = document.createElement('div');
  const newSelectButtonContent = document.createElement('i');

  //Insercion contenido en option, e insercion de option como contenido de select. Insercion de select dentro del div que es su padre
  newParentSelect.appendChild(newSelect);
  parentDivSelect.appendChild(newParentSelect);
  newParentSelect.className = `item__select-container position-${index}`;
  newSelect.className = `item__select position-${index}`;
  // newSelect.classList.add('item__select');
  newSelect.setAttribute('name', 'skills');

  //Insercion clase font-awesome en <i>, insercion <i> en <div>
  newSelectButtonContent.classList.add('fas', 'fa-plus', 'js__add');
  newSelectButtonContent.setAttribute('data-value', index);
  newSelectButton.appendChild(newSelectButtonContent);
  newSelectButton.classList.add('item__select-button');
  newParentSelect.appendChild(newSelectButton);

  //Añadir options
  for (const arrayOption of arrayOptions) {
    const newOption = document.createElement('option');
    newOption.setAttribute('number', arrayOption);
    newOption.setAttribute('value', arrayOption);
    const optionContent = document.createTextNode(arrayOption);
    newOption.appendChild(optionContent);
    newSelect.appendChild(newOption);
    newOption.classList.add('js__option');
  }

  changeButton();
};


//función para cambiar el signo del botón dependiendo de las seleciones del usuario
const changeButton = () => {
  const button = document.querySelectorAll('.js__add');
  for (let i = 0; i < button.length; i++) {
    if (userSelections.length === i) {
      button[i].classList.add('fa-plus');
      button[i].removeEventListener('click', removeSelect);
      button[i].addEventListener('click', addSelect);
    } else {
      button[i].classList.remove('fa-plus');
      button[i].classList.add('fa-minus');
      button[i].removeEventListener('click', addSelect);
      button[i].addEventListener('click', removeSelect);
    }
  }

};

//Función para añadir el contenido (hasta que las selecciones del usuario sean 3) y cambiar el signo del último botón
const addSelect = () => {
  console.log('estoy poniendo');
  userSelections = document.querySelectorAll('.item__select-container');

  let newIndex = 0;
  for (let i = 0; i < 3; i++) {
    let createdElements = document.querySelectorAll(`.position-${i}`);
    //console.log('createdElements.position' + i + "=" + createdElements.length);
    if (createdElements.length === 0) {
      newIndex = i;
    }
  }

  if (userSelections.length < 3) {
    addContentToHtml(newIndex);
  } else if (userSelections.length === 3) {
    changeButton();
  }
  addContentToCard();
};


//Función para quitar el contenido (de momento sólo quita el primer campo no el correspondiente al botón que se pincha)
const removeSelect = event => {
  console.log('estoy quitando');

  const clickedElement = event.currentTarget;
  const elementNumber = clickedElement.getAttribute('data-value');
  const plusButton = document.querySelectorAll('.fa-plus');
  const createdElements = document.querySelectorAll(`.position-${elementNumber}`);

  for (const createdElement of createdElements) {
    createdElement.remove();
  }

  userSelections = document.querySelectorAll('.item__select-container');

  if (plusButton.length === 0) {
    addContentToHtml(elementNumber);
  }
  //addContentToCard();
};

//constiables para crear la lista de habilidades en la preview de la tarjeta y darle clases
const skills = document.querySelector('.skills');
const skillsList = document.createElement('ul');

skills.appendChild(skillsList);
skillsList.classList.add('skills__list', 'text__skills');

//Función para crear el contenido de las habilidades en la preview de la trajeta.
const addContentToCard = () => {
  const selects = document.getElementsByTagName('select');
  const newSkillsItem = document.querySelectorAll('.skills__item');

  for (const newSkillItem of newSkillsItem) {
    skillsList.removeChild(newSkillItem);
  }


  for (let i = 0; i < userSelections.length; i++) {
    const userSelectionPosition = userSelections[i].classList[1];
    const optionContent = selects[i].value;
    const skillsItem = document.createElement('li');
    const skillsContent = document.createTextNode(optionContent);
    skillsItem.appendChild(skillsContent);
    skillsItem.classList.add(userSelectionPosition);
    skillsList.appendChild(skillsItem);
    skillsItem.classList.add('skills__item');
  }
};

'use strict';
// paleta

const paleta1 = document.querySelector('#color1');
const paleta2 = document.querySelector('#color2');
const paleta3 = document.querySelector('#color3');
const card = document.querySelector('#card');
const cardInfo = document.querySelector('#card__info');

const changeColor = event => {
  const clickedPalette = event.currentTarget;
  const selectedPalette = clickedPalette.getAttribute('radio-cual');
  card.classList.remove('paleta-azul', 'paleta-roja', 'paleta-gris');
  if (selectedPalette === '1') {
    card.classList.add('paleta-azul');
  } else if (selectedPalette === '2') {
    card.classList.add('paleta-roja');
  } else if (selectedPalette === '3') {
    card.classList.add('paleta-gris');
  }
};

paleta1.addEventListener('click', changeColor);
paleta2.addEventListener('click', changeColor);
paleta3.addEventListener('click', changeColor);

// fuentes

const font1 = document.querySelector('#font1');
const font2 = document.querySelector('#font2');
const font3 = document.querySelector('#font3');

const changeFont = event => {
  const clickedFont = event.currentTarget;
  const selectedFont = clickedFont.getAttribute('radio-cual');
  cardInfo.classList.remove('font-card--comicsans', 'font-card--ubuntu', 'font-card--montserrat');

  if (selectedFont === '4') {
    cardInfo.classList.add('font-card--ubuntu');
  } else if (selectedFont === '5') {
    cardInfo.classList.add('font-card--comicsans');
  } else if (selectedFont === '6') {
    cardInfo.classList.add('font-card--montserrat');
  }
};

font1.addEventListener('click', changeFont);
font2.addEventListener('click', changeFont);
font3.addEventListener('click', changeFont);

'use strict';

const listOfChosenSelects = document.getElementsByTagName('select');
const submitButton = document.querySelector('#submit');
const responseURL = document.querySelector('.response');
const buttonTwitter = document.querySelector('.btn-twitter');
const linkTwitter = document.querySelector('.link-twitter');
const form = document.querySelector('#form');
const cardCreated = document.querySelector('.card-created');
let twitterURL;

const sendData = () => {
  const inputs = Array.from(form.elements);
  const json = getJSONFromInputs(inputs);
  json.skills = [];
  console.log(`json ${json}`);
  for (const oneSelect of listOfChosenSelects){
    json.skills.push(oneSelect.value);
  }
  json.photo = fr.result;
  console.log(`json justo antes enviar datos ${json}`);
  const jsonFromLocalStorage = JSON.parse(localStorage.getItem('jsonToSend'));
  console.log(`jasonFromLocal ${jsonFromLocalStorage}`);
  if(JSON.stringify(json) === JSON.stringify(jsonFromLocalStorage)){
    const urlFromStorage = JSON.parse(localStorage.getItem('cardURL'));
    responseURL.innerHTML = `<a href=${urlFromStorage}>${urlFromStorage}</a>`;
    twitterURL = urlFromStorage;
    cardCreated.classList.remove('hidden__item');
  } else {
    sendRequest(json);
  }
};

const loadPhoto = () => {
  const myFile = document.querySelector('#image').files[0];
  fr.addEventListener('load', sendData);
  fr.readAsDataURL(myFile);
};

const getJSONFromInputs = inputs =>{
  return inputs.reduce(function (acc, val) {

    if (val.type==='radio' && val.checked===true) {
      acc[val.name] = val.value;
    }
    if ((val.nodeName !== 'BUTTON') && (val.nodeName !== 'FIELDSET') && (val.type!=='radio') ){
      acc[val.name] = val.value;
    }
    return acc;
  }, {});
};


const sendRequest = json => {
  localStorage.setItem('jsonToSend',JSON.stringify(json));
  fetch('https://us-central1-awesome-cards-cf6f0.cloudfunctions.net/card/', {
    method: 'POST',
    body: JSON.stringify(json),
    headers: {
      'content-type': 'application/json'
    },
  })

    .then(resp=> {
      return resp.json(); })
    .then(result=> {
      console.log(`result ${result}`);
      showURL(result); })
    .catch(error=>{
      console.log(error);
    });
};

const  showURL = result => {
  if(result.success){
    localStorage.setItem('cardURL',JSON.stringify(result.cardURL));
    responseURL.innerHTML = `<a href=${result.cardURL}>${result.cardURL}</a>`;
  }else{
    responseURL.innerHTML = 'ERROR:' + result.error;
  }
  cardCreated.classList.remove('hidden__item');
  twitterURL = result.cardURL;

  if (submitButton.classList.contains('btn-card')) {
    submitButton.classList.remove('btn-card');
    submitButton.classList.add('btn-card--inactive');
  }
};

submitButton.addEventListener('click', loadPhoto);

////Boton twitter
const shareOnTwitter = () => {
  linkTwitter.href =`https://twitter.com/intent/tweet?url=${twitterURL}&text=Acabo%20de%20crear%20mi%20tarjeta%20con%20Font%20Awesome%20de%20Peak-y-blinded&hashtags=WomenInTech`;
};


buttonTwitter.addEventListener('click', shareOnTwitter);

'use strict';

let data = {};
let dataStorageRetrieved = [];

const inputStorage = document.querySelectorAll('.input__storage');

//Recupero los datos de localStorage y los guardo en una variable

const restoreDataForPreview = dataStorageRetrieved => {

  document.querySelector('#element-name').innerText = dataStorageRetrieved.name;
  document.querySelector('#element-role').innerText = dataStorageRetrieved.job;
  document.querySelector('#element-mail').href = `mailto:${dataStorageRetrieved.email}`;
  document.querySelector('#element-tel').href = `tel:${dataStorageRetrieved.phone}`;
  document.querySelector('#element-lin').href = `https://linkedin.com/in/${dataStorageRetrieved.linkedin}`;
  document.querySelector('#element-gh').href = `https://github.com/${dataStorageRetrieved.github}`;
  document.querySelector('.personal-image').src = dataStorageRetrieved.photo;

  const cardPreview = document.querySelector('#card');

console.log(dataStorageRetrieved.palette);
  if (dataStorageRetrieved.palette === '1') {
    cardPreview.classList.remove('paleta-azul', 'paleta-roja', 'paleta-gris');
    cardPreview.classList.add('paleta-azul');
  } else if (dataStorageRetrieved.palette === '2') {
    cardPreview.classList.remove('paleta-azul', 'paleta-roja', 'paleta-gris');
    cardPreview.classList.add('paleta-roja');
  } else if (dataStorageRetrieved.palette === '3') {
    cardPreview.classList.remove('paleta-azul', 'paleta-roja', 'paleta-gris');
    cardPreview.classList.add('paleta-gris');
  }

  if (dataStorageRetrieved.typography === '1') {
    cardPreview.classList.remove('font-card--comicsans', 'font-card--ubuntu', 'font-card--montserrat');
    cardPreview.classList.add('font-card--ubuntu');
  } else if (dataStorageRetrieved.typography === '2') {
    cardPreview.classList.remove('font-card--comicsans', 'font-card--ubuntu', 'font-card--montserrat');
    cardPreview.classList.add('font-card--comicsans');
  } else if (dataStorageRetrieved.typography === '3') {
    cardPreview.classList.remove('font-card--comicsans', 'font-card--ubuntu', 'font-card--montserrat');
    cardPreview.classList.add('font-card--montserrat');
  }
};
//Función para recuperar datos almacenados en localStorage
const useDataStorage = (inputStorageName, inputStorageValue, inputStoragePosition) => {
  console.log('recuperando localStorage');
  dataStorageRetrieved = JSON.parse(localStorage.getItem('jsonToSend'));
  console.dir(dataStorageRetrieved);
  restoreDataForPreview(dataStorageRetrieved);

  //Miro que el localStorage no esté vacio
  if(dataStorageRetrieved !== null){
  //Creo una acción por si hay campos vacios
    if(dataStorageRetrieved[inputStorageName] === undefined){
      inputStorageName = '';
    }else {
      //Introduzco los datos recuperador en el objeto 'data'
      inputStorageValue = dataStorageRetrieved[inputStorageName];
      data[inputStorageName] = inputStorageValue;

      if(inputStoragePosition.type === 'radio' && inputStoragePosition.value === data[inputStorageName] ){
        //Condicion si los inputs son tipo radio
        inputStoragePosition.checked = true;
      } else if(inputStoragePosition.type === 'file'){
        //Para la foto
        const miniImage = document.querySelector('.item-preview__img');
        miniImage.src = dataStorageRetrieved.photo;
      } else{
        inputStoragePosition.value = data[inputStorageName];
      }
    }
  }
};

const saveDataStorage = event => {
  //Variable para actual nombre del input y valor del input
  const currentInput = event.currentTarget;
  const currentInputName = currentInput.name;
  const currentInputValue = currentInput.value;

  if(currentInput.type === 'file'){
    const miniImage = document.querySelector('.item-preview__img');
    data[currentInputName] = miniImage.src;

  } else if (currentInput.type === 'radio' && currentInput.checked === true){
    data[currentInputName] = currentInputValue;
    // localStorage.setItem(currentInputName,currentInputValue);
  } else {
    //Guardo los datos dentro del objeto 'data'
    data[currentInputName] = currentInputValue;
    // localStorage.setItem(currentInputName,currentInputValue);
  }

  //Guardo datos individualmente y tambien como objeto 'data' que convierto en cadena
  // localStorage.setItem(currentInputName,currentInputValue);
  localStorage.setItem('formData',JSON.stringify(data));
};

//Bucle para recorrer los elementos input del formulario, es decir, los radiobuttons, inputs del formulario y skills. Todos esos elementos tienen la clase .input___storage.
//De los elementos cojo su índice (dataStorage), su nombre (dataStorage.name) y su valor (dataStorage.value).
//Una vez recorrido un elemento, hago una función que recupera los datos del local storage si los hay (useDataStorage).
for (const data of inputStorage){
  const inputStoragePosition = data;
  const inputStorageName = data.name;
  const inputStorageValue = data.value;
  useDataStorage(inputStorageName, inputStorageValue, inputStoragePosition);
  data.addEventListener('change',saveDataStorage);
}


// for (const dataStorage of inputStorage){
//   dataStorage.addEventListener('change',saveDataStorage);
// }

//# sourceMappingURL=main.min.js.map
